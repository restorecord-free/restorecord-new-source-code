// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = "mysql://restorecord_db:CFpsuJyCN5jQE7@localhost:3306/rest_main?connection_limit=30"

    // url      = "file:./database.db"
}

model accounts {
    id             Int          @id @default(autoincrement())
    username       String       @unique @db.VarChar(255)
    email          String       @db.LongText()
    password       String       @db.LongText()
    role           String?      @default("free")
    pfp            String       @default("https://cdn.restorecord.com/logo512.png")
    banned         Int          @default(0)
    twoFactor      Boolean      @default(false)
    googleAuthCode String?
    darkmode       Boolean      @default(true)
    expiry         DateTime?
    admin          Boolean      @default(false)
    lastIp         String?
    createdAt      DateTime     @default(now())
    userId         BigInt?      @db.UnsignedBigInt
    referrer       Int?
    referralCode   String?      @unique
    servers        servers[]
    customBots     customBots[]
    sessions       sessions[]
    emails         emails[]
    payments       payments[]
}

model servers {
    id           Int            @id @default(autoincrement())
    name         String         @unique
    ownerId      Int
    guildId      BigInt         @unique @db.UnsignedBigInt
    roleId       BigInt         @unique @db.UnsignedBigInt
    redirectUrl  String?
    picture      String?        @default("https://cdn.restorecord.com/logo512.png")
    vpncheck     Boolean        @default(false)
    webhook      String?
    bgImage      String?
    description  String         @default("Verify to view the rest of the server.")
    themeColor   String         @default("4f46e5")
    customBotId  Int
    pulling      Boolean        @default(false)
    pullTimeout  DateTime?      @default(now())
    locked       Boolean        @default(false)
    createdAt    DateTime       @default(now())
    customBot    customBots     @relation(fields: [customBotId], references: [id])
    owner        accounts       @relation(fields: [ownerId], references: [id])
    members      members[]
    blacklist    blacklist[]
    backups      backups[]
    guildMembers guildMembers[]
}

model backups {
    id          Int            @id @default(autoincrement())
    serverName  String
    guildId     BigInt         @unique @db.UnsignedBigInt
    iconURL     String
    backupId    String         @unique @default(uuid())
    createdAt   DateTime       @default(now())
    server      servers        @relation(fields: [guildId], references: [guildId])
    channels    channels[]
    roles       roles[]
    guildMembes guildMembers[]
}

model channels {
    id               Int                  @id @default(autoincrement())
    channelId        BigInt               @unique @db.UnsignedBigInt
    backupId         String
    type             Int
    name             String
    position         Int
    bitrate          Int?
    userLimit        Int?
    parentId         BigInt?              @db.UnsignedBigInt
    topic            String?              @db.VarChar(999)
    rateLimitPerUser Int?
    nsfw             Boolean
    createdAt        DateTime             @default(now())
    permissions      channelPermissions[] @relation("channel_permissions")
    backup           backups              @relation(fields: [backupId], references: [backupId])
}

model channelPermissions {
    id        Int      @id @default(autoincrement())
    channelId BigInt   @db.UnsignedBigInt
    roleId    BigInt   @db.UnsignedBigInt
    type      String
    allow     BigInt
    deny      BigInt
    createdAt DateTime @default(now())
    channel   channels @relation("channel_permissions", fields: [channelId], references: [channelId])
}

model roles {
    id          Int      @id @default(autoincrement())
    backupId    String
    name        String
    roleId      BigInt   @unique @db.UnsignedBigInt
    botId       BigInt?
    color       String
    hoist       Boolean
    permissions BigInt
    mentionable Boolean
    position    Int
    isEveryone  Boolean
    createdAt   DateTime @default(now())
    backup      backups  @relation(fields: [backupId], references: [backupId])
}

model guildMembers {
    id        Int      @id @default(autoincrement())
    backupId  String
    userId    BigInt   @db.UnsignedBigInt
    guildId   BigInt   @db.UnsignedBigInt
    nickname  String?
    roles     String   @db.LongText()
    createdAt DateTime @default(now())
    backup    backups  @relation(fields: [backupId], references: [backupId])
    server    servers  @relation(fields: [guildId], references: [guildId])
    // @@index([userId, guildId])

    @@unique([userId, guildId])
}

model logs {
    id        Int      @id @default(autoincrement())
    title     String   @db.LongText()
    body      String   @db.LongText()
    createdAt DateTime @default(now())
}

model errors {
    id        Int      @id @default(autoincrement())
    code      String   @unique
    message   String   @db.LongText()
    createdAt DateTime @default(now())
}

model sessions {
    id        Int      @id @default(autoincrement())
    token     String   @unique @db.VarChar(999)
    account   accounts @relation(fields: [accountId], references: [id])
    accountId Int
    createdAt DateTime @default(now())
}

model members {
    id           Int      @id @default(autoincrement())
    userId       BigInt   @db.UnsignedBigInt
    guildId      BigInt   @db.UnsignedBigInt
    accessToken  String
    refreshToken String
    ip           String?
    username     String
    avatar       String
    email        String?  @db.VarChar(999)
    isp          String?
    state        String?
    city         String?
    country      String?
    vpn          Boolean  @default(false)
    createdAt    DateTime @default(now())
    guild        servers  @relation(fields: [guildId], references: [guildId])
    // @@index([userId, guildId])

    @@unique([userId, guildId])
}

model blacklist {
    id        Int      @id @default(autoincrement())
    type      Int
    value     String
    reason    String?  @db.VarChar(999)
    guildId   BigInt   @db.UnsignedBigInt
    guild     servers  @relation(fields: [guildId], references: [guildId])
    createdAt DateTime @default(now())
}

model customBots {
    id           Int       @id @default(autoincrement())
    name         String
    clientId     BigInt    @unique @db.UnsignedBigInt
    botToken     String
    botSecret    String
    publicKey    String?
    customDomain String?
    ownerId      Int
    owner        accounts  @relation(fields: [ownerId], references: [id])
    servers      servers[]
}

model news {
    id        Int      @id @default(autoincrement())
    title     String   @db.LongText
    content   String   @db.LongText
    author    String
    createdAt DateTime @default(now())
}

model emails {
    id        Int      @id @default(autoincrement())
    accountId Int
    title     String   @db.LongText
    code      String   @db.VarChar(999)
    expires   DateTime
    used      Boolean  @default(false)
    createdAt DateTime @default(now())
    account   accounts @relation(fields: [accountId], references: [id])
}

model payments {
    id             Int      @id @default(autoincrement())
    accountId      Int
    amount         Int
    type           String
    subscriptionId String   @unique @db.VarChar(999)
    payment_status String
    createdAt      DateTime @default(now())
    account        accounts @relation(fields: [accountId], references: [id])
}